package main

import (
	"fmt"
	"sync"
	"time"
)

func task(id int, ch chan<- string, wg *sync.WaitGroup) {
	defer wg.Done()
	fmt.Printf("Task %d start \n", id)
	time.Sleep(1 * time.Second)
	ch <- fmt.Sprintf("Task %d finish \n", id)
	ch <- fmt.Sprintf("Ending %d \n", id)

}

func main() {

	start := time.Now()

	var wg sync.WaitGroup

	ch := make(chan string, 4)

	for i := 1; i <= 4; i++ {
		wg.Add(1)
		go task(i, ch, &wg)
	}

	go func() {
		wg.Wait()
		close(ch)
	}()

	// for i := 1; i <= 4; i++ {
	// 	fmt.Print(<-ch)
	// } // hoac dung  for range

	for val := range ch {
		fmt.Println(val)
	}

	fmt.Println("All time finish: ", time.Since(start))

}
